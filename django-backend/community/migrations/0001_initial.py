# Generated by Django 5.2.4 on 2025-07-17 20:23

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CommunityPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('post_type', models.CharField(choices=[('discussion', 'Discussion'), ('question', 'Question'), ('announcement', 'Announcement'), ('job_posting', 'Job Posting'), ('project_showcase', 'Project Showcase'), ('resource_sharing', 'Resource Sharing')], default='discussion', max_length=20)),
                ('tags', models.JSONField(default=list)),
                ('skills_related', models.JSONField(default=list)),
                ('upvotes', models.IntegerField(default=0)),
                ('downvotes', models.IntegerField(default=0)),
                ('view_count', models.IntegerField(default=0)),
                ('comment_count', models.IntegerField(default=0)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_locked', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=True)),
                ('is_flagged', models.BooleanField(default=False)),
                ('moderation_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='community_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'community_posts',
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('event_type', models.CharField(choices=[('meetup', 'Meetup'), ('workshop', 'Workshop'), ('webinar', 'Webinar'), ('conference', 'Conference'), ('networking', 'Networking Event'), ('hackathon', 'Hackathon'), ('competition', 'Competition'), ('social', 'Social Event')], max_length=20)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('is_virtual', models.BooleanField(default=True)),
                ('location_name', models.CharField(blank=True, max_length=200, null=True)),
                ('location_address', models.TextField(blank=True, null=True)),
                ('virtual_meeting_url', models.URLField(blank=True, null=True)),
                ('virtual_meeting_id', models.CharField(blank=True, max_length=100, null=True)),
                ('virtual_meeting_password', models.CharField(blank=True, max_length=100, null=True)),
                ('max_participants', models.IntegerField(blank=True, null=True)),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('requires_approval', models.BooleanField(default=False)),
                ('is_free', models.BooleanField(default=True)),
                ('ticket_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('registration_open', 'Registration Open'), ('registration_closed', 'Registration Closed'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('members_only', 'Members Only')], default='public', max_length=20)),
                ('topics', models.JSONField(default=list)),
                ('required_skills', models.JSONField(default=list)),
                ('skills_to_learn', models.JSONField(default=list)),
                ('agenda', models.TextField(blank=True, null=True)),
                ('materials_url', models.URLField(blank=True, null=True)),
                ('recording_url', models.URLField(blank=True, null=True)),
                ('registration_count', models.IntegerField(default=0)),
                ('attendance_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('co_organizers', models.ManyToManyField(blank=True, related_name='co_organized_events', to=settings.AUTH_USER_MODEL)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'events',
                'ordering': ['start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='Hackathon',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('theme', models.CharField(max_length=200)),
                ('rules', models.TextField()),
                ('judging_criteria', models.JSONField(default=list)),
                ('min_team_size', models.IntegerField(default=1)),
                ('max_team_size', models.IntegerField(default=5)),
                ('allow_solo_participation', models.BooleanField(default=True)),
                ('team_formation_deadline', models.DateTimeField()),
                ('submission_deadline', models.DateTimeField()),
                ('judging_start', models.DateTimeField()),
                ('results_announcement', models.DateTimeField()),
                ('total_prize_pool', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('registration_open', 'Registration Open'), ('team_formation', 'Team Formation'), ('in_progress', 'In Progress'), ('judging', 'Judging'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='upcoming', max_length=20)),
                ('team_count', models.IntegerField(default=0)),
                ('submission_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='hackathon_details', to='community.event')),
            ],
            options={
                'db_table': 'hackathons',
            },
        ),
        migrations.CreateModel(
            name='HackathonTeam',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('forming', 'Forming'), ('complete', 'Complete'), ('participating', 'Participating'), ('submitted', 'Submitted'), ('disqualified', 'Disqualified')], default='forming', max_length=20)),
                ('looking_for_members', models.BooleanField(default=True)),
                ('required_skills', models.JSONField(default=list)),
                ('project_name', models.CharField(blank=True, max_length=200, null=True)),
                ('project_description', models.TextField(blank=True, null=True)),
                ('project_url', models.URLField(blank=True, null=True)),
                ('github_repo', models.URLField(blank=True, null=True)),
                ('demo_url', models.URLField(blank=True, null=True)),
                ('presentation_url', models.URLField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('submission_notes', models.TextField(blank=True, null=True)),
                ('final_score', models.FloatField(blank=True, null=True)),
                ('ranking', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('hackathon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='community.hackathon')),
                ('members', models.ManyToManyField(related_name='hackathon_teams', to=settings.AUTH_USER_MODEL)),
                ('team_leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='led_hackathon_teams', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'hackathon_teams',
                'ordering': ['hackathon', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Meetup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('series_name', models.CharField(max_length=200)),
                ('frequency', models.CharField(choices=[('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('irregular', 'Irregular')], max_length=20)),
                ('community_tags', models.JSONField(default=list)),
                ('has_presentations', models.BooleanField(default=True)),
                ('has_networking', models.BooleanField(default=True)),
                ('has_workshops', models.BooleanField(default=False)),
                ('next_meetup_date', models.DateTimeField(blank=True, null=True)),
                ('next_meetup_topic', models.CharField(blank=True, max_length=200, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='meetup_details', to='community.event')),
                ('regular_attendees', models.ManyToManyField(blank=True, related_name='regular_meetups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'meetups',
            },
        ),
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('prize_type', models.CharField(choices=[('cash', 'Cash Prize'), ('product', 'Product/Service'), ('certificate', 'Certificate'), ('mentorship', 'Mentorship Opportunity'), ('internship', 'Internship Offer'), ('job_offer', 'Job Offer'), ('credits', 'Platform Credits'), ('other', 'Other')], max_length=20)),
                ('value', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('sponsor_company', models.CharField(blank=True, max_length=200, null=True)),
                ('position', models.IntegerField()),
                ('category', models.CharField(blank=True, max_length=100, null=True)),
                ('eligibility_criteria', models.TextField(blank=True, null=True)),
                ('terms_and_conditions', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prizes', to='community.event')),
                ('hackathon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prizes', to='community.hackathon')),
                ('sponsor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sponsored_prizes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'prizes',
                'ordering': ['event', 'position'],
            },
        ),
        migrations.CreateModel(
            name='Winner',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('announced', 'Announced'), ('contacted', 'Contacted'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('awarded', 'Prize Awarded')], default='announced', max_length=20)),
                ('announcement_date', models.DateTimeField(auto_now_add=True)),
                ('contact_date', models.DateTimeField(blank=True, null=True)),
                ('award_date', models.DateTimeField(blank=True, null=True)),
                ('winning_submission', models.TextField(blank=True, null=True)),
                ('judge_comments', models.TextField(blank=True, null=True)),
                ('delivery_method', models.CharField(blank=True, max_length=100, null=True)),
                ('delivery_status', models.CharField(blank=True, max_length=100, null=True)),
                ('delivery_tracking', models.CharField(blank=True, max_length=200, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('prize', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='winners', to='community.prize')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='won_prizes', to='community.hackathonteam')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='won_prizes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'winners',
                'ordering': ['-announcement_date'],
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled'), ('attended', 'Attended'), ('no_show', 'No Show')], default='approved', max_length=20)),
                ('registration_notes', models.TextField(blank=True, null=True)),
                ('checked_in', models.BooleanField(default=False)),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('payment_required', models.BooleanField(default=False)),
                ('payment_completed', models.BooleanField(default=False)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='community.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'event_registrations',
                'ordering': ['-created_at'],
                'unique_together': {('event', 'user')},
            },
        ),
    ]
