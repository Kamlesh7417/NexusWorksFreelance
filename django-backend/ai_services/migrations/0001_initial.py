# Generated by Django 5.2.4 on 2025-07-17 20:23

import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projects', '0003_remove_projectmilestone_project_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SkillNode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('programming_language', 'Programming Language'), ('framework', 'Framework'), ('database', 'Database'), ('tool', 'Tool'), ('methodology', 'Methodology'), ('domain', 'Domain Knowledge')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('popularity_score', models.FloatField(default=0.0, help_text='Market demand score')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ai_skill_nodes',
            },
        ),
        migrations.CreateModel(
            name='DeveloperProfileEmbedding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('developer_id', models.CharField(max_length=100, unique=True)),
                ('skills_embedding', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Embedding of developer skills', size=384)),
                ('experience_embedding', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Embedding of developer experience and projects', size=384)),
                ('github_embedding', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Embedding of GitHub repository analysis', size=384)),
                ('skill_tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=list, help_text='Extracted skill tags', size=None)),
                ('experience_level', models.CharField(default='mid', max_length=20)),
                ('primary_technologies', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=list, help_text='Primary technology stack', size=None)),
                ('domain_expertise', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=list, help_text='Domain expertise areas', size=None)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'developer_profile_embeddings',
                'indexes': [models.Index(fields=['developer_id'], name='developer_p_develop_07481c_idx'), models.Index(fields=['experience_level'], name='developer_p_experie_c978e6_idx'), models.Index(fields=['updated_at'], name='developer_p_updated_056b84_idx')],
            },
        ),
        migrations.CreateModel(
            name='EmbeddingCache',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cache_key', models.CharField(max_length=255, unique=True)),
                ('embedding', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Cached embedding vector', size=384)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='Cache expiration time')),
            ],
            options={
                'db_table': 'ai_embedding_cache',
                'indexes': [models.Index(fields=['cache_key'], name='ai_embeddin_cache_k_06ece3_idx'), models.Index(fields=['expires_at'], name='ai_embeddin_expires_d39dc7_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProjectRequirementEmbedding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('project_id', models.CharField(max_length=100, unique=True)),
                ('description_embedding', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Embedding of project description', size=384)),
                ('requirements_embedding', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Embedding of technical requirements', size=384)),
                ('domain_embedding', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Embedding of domain/industry context', size=384)),
                ('required_skills', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=list, help_text='Required technical skills', size=None)),
                ('complexity_level', models.CharField(default='medium', max_length=20)),
                ('project_type', models.CharField(default='web_development', max_length=50)),
                ('estimated_duration_weeks', models.IntegerField(default=4)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'project_requirement_embeddings',
                'indexes': [models.Index(fields=['project_id'], name='project_req_project_101ee9_idx'), models.Index(fields=['complexity_level'], name='project_req_complex_512c8e_idx'), models.Index(fields=['project_type'], name='project_req_project_92c193_idx'), models.Index(fields=['updated_at'], name='project_req_updated_5e7fd4_idx')],
            },
        ),
        migrations.CreateModel(
            name='SimilaritySearchResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('query_embedding_hash', models.CharField(help_text='Hash of query embedding', max_length=64)),
                ('content_type', models.CharField(max_length=50)),
                ('results', models.JSONField(help_text='Cached similarity search results')),
                ('similarity_threshold', models.FloatField()),
                ('max_results', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='Cache expiration time')),
            ],
            options={
                'db_table': 'similarity_search_cache',
                'indexes': [models.Index(fields=['query_embedding_hash', 'content_type'], name='similarity__query_e_2a1c57_idx'), models.Index(fields=['expires_at'], name='similarity__expires_1ee47a_idx')],
                'unique_together': {('query_embedding_hash', 'content_type', 'similarity_threshold', 'max_results')},
            },
        ),
        migrations.CreateModel(
            name='SkillEmbedding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('skill_name', models.CharField(max_length=100, unique=True)),
                ('skill_category', models.CharField(max_length=50)),
                ('embedding', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Skill embedding vector', size=384)),
                ('popularity_score', models.FloatField(default=0.0, help_text='Market demand score')),
                ('difficulty_level', models.CharField(default='medium', max_length=20)),
                ('related_skills', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, help_text='Related or complementary skills', size=None)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'skill_embeddings',
                'indexes': [models.Index(fields=['skill_name'], name='skill_embed_skill_n_010d8f_idx'), models.Index(fields=['skill_category'], name='skill_embed_skill_c_67d528_idx'), models.Index(fields=['popularity_score'], name='skill_embed_popular_4f7e7b_idx')],
            },
        ),
        migrations.CreateModel(
            name='SkillRelationship',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('relationship_type', models.CharField(choices=[('prerequisite', 'Prerequisite'), ('complementary', 'Complementary'), ('alternative', 'Alternative'), ('builds_on', 'Builds On'), ('used_with', 'Used With')], max_length=50)),
                ('strength', models.FloatField(default=1.0, help_text='Relationship strength (0.0 to 1.0)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('from_skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_relationships', to='ai_services.skillnode')),
                ('to_skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_relationships', to='ai_services.skillnode')),
            ],
            options={
                'db_table': 'ai_skill_relationships',
            },
        ),
        migrations.AddField(
            model_name='skillnode',
            name='related_skills',
            field=models.ManyToManyField(related_name='reverse_related_skills', through='ai_services.SkillRelationship', to='ai_services.skillnode'),
        ),
        migrations.CreateModel(
            name='TaskEmbedding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('embedding', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Vector embedding representation', size=384)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('task_description_text', models.TextField(help_text='Processed task description')),
                ('required_skills', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, help_text='Required skills for this task', size=None)),
                ('task', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='embedding_profile', to='projects.task')),
            ],
            options={
                'db_table': 'ai_task_embeddings',
            },
        ),
        migrations.CreateModel(
            name='VectorEmbedding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content_type', models.CharField(max_length=50)),
                ('content_id', models.CharField(max_length=100)),
                ('embedding', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Vector embedding representation', size=384)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata for the embedding')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'vector_embeddings',
                'indexes': [models.Index(fields=['content_type', 'content_id'], name='vector_embe_content_3e0450_idx'), models.Index(fields=['created_at'], name='vector_embe_created_10ff8d_idx')],
                'unique_together': {('content_type', 'content_id')},
            },
        ),
        migrations.CreateModel(
            name='DeveloperEmbedding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('embedding', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Vector embedding representation', size=384)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('skills_text', models.TextField(help_text='Concatenated skills and experience text')),
                ('github_summary', models.TextField(blank=True, help_text='GitHub profile analysis summary')),
                ('resume_summary', models.TextField(blank=True, help_text='Resume analysis summary')),
                ('last_github_update', models.DateTimeField(blank=True, null=True)),
                ('embedding_version', models.CharField(default='v1.0', max_length=50)),
                ('developer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='embedding_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_developer_embeddings',
                'indexes': [models.Index(fields=['developer'], name='ai_develope_develop_266f2d_idx'), models.Index(fields=['last_github_update'], name='ai_develope_last_gi_d6ce01_idx')],
            },
        ),
        migrations.CreateModel(
            name='MatchingResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vector_similarity_score', models.FloatField(help_text='Cosine similarity score')),
                ('graph_relationship_score', models.FloatField(help_text='Graph-based relationship score')),
                ('availability_score', models.FloatField(help_text='Developer availability score')),
                ('reputation_score', models.FloatField(help_text='Developer reputation score')),
                ('final_match_score', models.FloatField(help_text='Weighted final score')),
                ('matching_algorithm_version', models.CharField(default='v1.0', max_length=50)),
                ('matching_metadata', models.JSONField(default=dict, help_text='Additional matching details and explanations')),
                ('was_selected', models.BooleanField(default=False)),
                ('selection_feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('developer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
            ],
            options={
                'db_table': 'ai_matching_results',
                'indexes': [models.Index(fields=['project', 'final_match_score'], name='ai_matching_project_3821f1_idx'), models.Index(fields=['developer', 'final_match_score'], name='ai_matching_develop_044ce9_idx'), models.Index(fields=['was_selected'], name='ai_matching_was_sel_8cd27b_idx'), models.Index(fields=['created_at'], name='ai_matching_created_d4d5b0_idx')],
                'unique_together': {('project', 'developer')},
            },
        ),
        migrations.CreateModel(
            name='ProjectEmbedding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('embedding', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Vector embedding representation', size=384)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('requirements_text', models.TextField(help_text='Processed project requirements text')),
                ('technical_keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, help_text='Extracted technical keywords', size=None)),
                ('complexity_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], default='medium', max_length=20)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='embedding_profile', to='projects.project')),
            ],
            options={
                'db_table': 'ai_project_embeddings',
                'indexes': [models.Index(fields=['project'], name='ai_project__project_65b578_idx'), models.Index(fields=['complexity_level'], name='ai_project__complex_15f128_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProjectSkillRequirement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('required_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=20)),
                ('importance', models.CharField(choices=[('nice_to_have', 'Nice to Have'), ('preferred', 'Preferred'), ('required', 'Required'), ('critical', 'Critical')], default='required', max_length=20)),
                ('weight', models.FloatField(default=1.0, help_text='Importance weight for matching')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_services.skillnode')),
            ],
            options={
                'db_table': 'ai_project_skill_requirements',
                'indexes': [models.Index(fields=['project', 'importance'], name='ai_project__project_fff550_idx'), models.Index(fields=['skill', 'required_level'], name='ai_project__skill_i_5b8844_idx')],
                'unique_together': {('project', 'skill')},
            },
        ),
        migrations.CreateModel(
            name='DeveloperSkillProficiency',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('proficiency_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=20)),
                ('years_experience', models.FloatField(default=0.0)),
                ('confidence_score', models.FloatField(default=0.5, help_text='AI confidence in this assessment (0.0 to 1.0)')),
                ('github_evidence', models.JSONField(default=dict, help_text='GitHub-based evidence')),
                ('resume_evidence', models.JSONField(default=dict, help_text='Resume-based evidence')),
                ('project_evidence', models.JSONField(default=dict, help_text='Project-based evidence')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('developer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_services.skillnode')),
            ],
            options={
                'db_table': 'ai_developer_skill_proficiency',
                'indexes': [models.Index(fields=['developer', 'proficiency_level'], name='ai_develope_develop_602d32_idx'), models.Index(fields=['skill', 'proficiency_level'], name='ai_develope_skill_i_693597_idx'), models.Index(fields=['confidence_score'], name='ai_develope_confide_cbf990_idx')],
                'unique_together': {('developer', 'skill')},
            },
        ),
        migrations.AddIndex(
            model_name='skillrelationship',
            index=models.Index(fields=['from_skill', 'relationship_type'], name='ai_skill_re_from_sk_f96ead_idx'),
        ),
        migrations.AddIndex(
            model_name='skillrelationship',
            index=models.Index(fields=['to_skill', 'relationship_type'], name='ai_skill_re_to_skil_b41ddb_idx'),
        ),
        migrations.AddIndex(
            model_name='skillrelationship',
            index=models.Index(fields=['strength'], name='ai_skill_re_strengt_fd6e76_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='skillrelationship',
            unique_together={('from_skill', 'to_skill', 'relationship_type')},
        ),
        migrations.AddIndex(
            model_name='skillnode',
            index=models.Index(fields=['name'], name='ai_skill_no_name_455b02_idx'),
        ),
        migrations.AddIndex(
            model_name='skillnode',
            index=models.Index(fields=['category'], name='ai_skill_no_categor_3f9101_idx'),
        ),
        migrations.AddIndex(
            model_name='skillnode',
            index=models.Index(fields=['popularity_score'], name='ai_skill_no_popular_1d7530_idx'),
        ),
        migrations.AddIndex(
            model_name='taskembedding',
            index=models.Index(fields=['task'], name='ai_task_emb_task_id_8b8133_idx'),
        ),
    ]
