#!/bin/bash

# Comprehensive test runner for AI-powered freelancing platform
# This script runs all tests: Django backend, Next.js frontend, and E2E tests

set -e  # Exit on any error

echo "ðŸš€ Starting comprehensive test suite for AI-powered freelancing platform"
echo "=================================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if required tools are installed
check_dependencies() {
    print_status "Checking dependencies..."
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js is not installed"
        exit 1
    fi
    
    # Check Python
    if ! command -v python &> /dev/null && ! command -v python3 &> /dev/null; then
        print_error "Python is not installed"
        exit 1
    fi
    
    # Check if virtual environment exists for Django
    if [ ! -d "django-backend/.venv" ]; then
        print_warning "Django virtual environment not found. Creating one..."
        cd django-backend
        python -m venv .venv
        source .venv/bin/activate
        pip install -r requirements.txt || pip install -e .
        cd ..
    fi
    
    print_success "Dependencies check completed"
}

# Install frontend dependencies
install_frontend_deps() {
    print_status "Installing frontend dependencies..."
    
    if [ ! -d "node_modules" ]; then
        npm install
    else
        print_status "Frontend dependencies already installed"
    fi
    
    print_success "Frontend dependencies ready"
}

# Install backend dependencies
install_backend_deps() {
    print_status "Installing backend dependencies..."
    
    cd django-backend
    source .venv/bin/activate
    
    # Install test dependencies if not already installed
    pip install coverage pytest-django pytest-mock factory-boy
    
    cd ..
    print_success "Backend dependencies ready"
}

# Run Django backend tests
run_backend_tests() {
    print_status "Running Django backend tests..."
    
    cd django-backend
    source .venv/bin/activate
    
    # Run different test categories
    echo "Running unit tests..."
    python run_tests.py unit --verbose
    
    echo "Running integration tests..."
    python run_tests.py integration --verbose
    
    echo "Running AI matching E2E tests..."
    python run_tests.py e2e --verbose
    
    echo "Running performance tests..."
    python run_tests.py performance --verbose
    
    echo "Running security tests..."
    python run_tests.py security --verbose
    
    cd ..
    print_success "Backend tests completed"
}

# Run frontend tests
run_frontend_tests() {
    print_status "Running frontend tests..."
    
    # Run Jest tests
    npm test -- --coverage --watchAll=false
    
    print_success "Frontend tests completed"
}

# Run E2E tests
run_e2e_tests() {
    print_status "Running end-to-end tests..."
    
    # Start services in background
    print_status "Starting services for E2E tests..."
    
    # Start Django backend
    cd django-backend
    source .venv/bin/activate
    python manage.py runserver 8000 &
    DJANGO_PID=$!
    cd ..
    
    # Start Next.js frontend
    npm run dev &
    NEXTJS_PID=$!
    
    # Wait for services to start
    sleep 10
    
    # Run Playwright tests
    npx playwright test
    
    # Stop services
    kill $DJANGO_PID $NEXTJS_PID 2>/dev/null || true
    
    print_success "E2E tests completed"
}

# Run code quality checks
run_quality_checks() {
    print_status "Running code quality checks..."
    
    # Frontend linting
    print_status "Running frontend linting..."
    npm run lint || print_warning "Frontend linting issues found"
    
    # Backend linting
    print_status "Running backend linting..."
    cd django-backend
    source .venv/bin/activate
    python run_tests.py --lint || print_warning "Backend linting issues found"
    cd ..
    
    print_success "Code quality checks completed"
}

# Generate test coverage report
generate_coverage_report() {
    print_status "Generating coverage reports..."
    
    # Backend coverage
    cd django-backend
    source .venv/bin/activate
    python run_tests.py --coverage
    cd ..
    
    # Frontend coverage is generated by Jest
    print_status "Frontend coverage report available in coverage/"
    print_status "Backend coverage report available in django-backend/htmlcov/"
    
    print_success "Coverage reports generated"
}

# Main execution
main() {
    local run_backend=true
    local run_frontend=true
    local run_e2e=true
    local run_quality=true
    local generate_coverage=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --backend-only)
                run_frontend=false
                run_e2e=false
                shift
                ;;
            --frontend-only)
                run_backend=false
                run_e2e=false
                shift
                ;;
            --e2e-only)
                run_backend=false
                run_frontend=false
                shift
                ;;
            --no-quality)
                run_quality=false
                shift
                ;;
            --coverage)
                generate_coverage=true
                shift
                ;;
            --help)
                echo "Usage: $0 [OPTIONS]"
                echo "Options:"
                echo "  --backend-only    Run only backend tests"
                echo "  --frontend-only   Run only frontend tests"
                echo "  --e2e-only        Run only E2E tests"
                echo "  --no-quality      Skip code quality checks"
                echo "  --coverage        Generate coverage reports"
                echo "  --help            Show this help message"
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    # Record start time
    start_time=$(date +%s)
    
    # Run checks and setup
    check_dependencies
    install_frontend_deps
    install_backend_deps
    
    # Run tests based on options
    if [ "$run_backend" = true ]; then
        run_backend_tests
    fi
    
    if [ "$run_frontend" = true ]; then
        run_frontend_tests
    fi
    
    if [ "$run_e2e" = true ]; then
        run_e2e_tests
    fi
    
    if [ "$run_quality" = true ]; then
        run_quality_checks
    fi
    
    if [ "$generate_coverage" = true ]; then
        generate_coverage_report
    fi
    
    # Calculate total time
    end_time=$(date +%s)
    total_time=$((end_time - start_time))
    
    echo ""
    echo "=================================================================="
    print_success "All tests completed successfully! ðŸŽ‰"
    print_status "Total execution time: ${total_time} seconds"
    echo "=================================================================="
    
    # Summary
    echo ""
    echo "ðŸ“Š Test Summary:"
    if [ "$run_backend" = true ]; then
        echo "âœ… Backend tests (Django): PASSED"
    fi
    if [ "$run_frontend" = true ]; then
        echo "âœ… Frontend tests (Next.js): PASSED"
    fi
    if [ "$run_e2e" = true ]; then
        echo "âœ… End-to-end tests (Playwright): PASSED"
    fi
    if [ "$run_quality" = true ]; then
        echo "âœ… Code quality checks: COMPLETED"
    fi
    if [ "$generate_coverage" = true ]; then
        echo "âœ… Coverage reports: GENERATED"
    fi
    echo ""
    
    # Next steps
    echo "ðŸ”— Useful links:"
    echo "   â€¢ Frontend coverage: file://$(pwd)/coverage/lcov-report/index.html"
    echo "   â€¢ Backend coverage: file://$(pwd)/django-backend/htmlcov/index.html"
    echo "   â€¢ E2E test report: file://$(pwd)/playwright-report/index.html"
    echo ""
}

# Handle script interruption
trap 'print_error "Test execution interrupted"; kill $DJANGO_PID $NEXTJS_PID 2>/dev/null || true; exit 1' INT TERM

# Run main function
main "$@"